<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array tlsEnumValues = typeof(TlsCipherSuite).GetEnumValues(); #>
<# Array exchangeEnumValues = typeof(ExchangeAlgorithmTypeIndex).GetEnumValues(); #>
<# Array cipherEnumValues = typeof(CipherAlgorithmTypeIndex).GetEnumValues(); #>
<# Array hashEnumValues = typeof(HashAlgorithmTypeIndex).GetEnumValues(); #>


using System.Diagnostics;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct SslConnectionInfo
    {
        private void MapCipherSuite(TlsCipherSuite cipherSuite)
        {
            TlsCipherSuite = cipherSuite;
            KeyExchKeySize = 0;

            int data = GetPackedData(cipherSuite);
            Debug.Assert(data != 0, $"No mapping found for cipherSuite {cipherSuite}");

            KeyExchangeAlg = (int)s_exchangeAlgorithmTypes[(data >> (32 - (8 * 1)) & 0xFF)];
            DataCipherAlg = (int)s_cipherEnumValues[(data >> (32 - (8 * 2)) & 0xFF)];
            DataKeySize = (data >> (32 - (8 * 3)) & 0xFF);
            DataHashAlg = (int)s_hashEnumValues[(data >> (32 - (8 * 4)) & 0xFF)];
            DataHashKeySize = GetHashSize((HashAlgorithmType)DataHashAlg);

            static int GetHashSize(HashAlgorithmType hash)
            {
                switch (hash)
                {
                    case HashAlgorithmType.None:
                        return 0;
                    case HashAlgorithmType.Md5:
                        return 128;
                    case HashAlgorithmType.Sha1:
                        return 160;
                    case HashAlgorithmType.Sha256:
                        return 256;
                    case HashAlgorithmType.Sha384:
                        return 384;
                    case HashAlgorithmType.Sha512:
                        return 512;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(hash));
                }
            }
        }

        private static ReadOnlySpan<int> s_exchangeAlgorithmTypes =>
            new[] { <#
foreach (ExchangeAlgorithmTypeIndex val in exchangeEnumValues)
{
#>(int)ExchangeAlgorithmType.<#= val #>, <#
}
#>};

        private static ReadOnlySpan<int> s_cipherEnumValues =>
            new[] {<#
foreach (CipherAlgorithmTypeIndex val in cipherEnumValues)
{
#>(int)CipherAlgorithmType.<#= val #>, <#
}
#>};

        private static ReadOnlySpan<int> s_hashEnumValues =>
            new[] { <#
foreach (HashAlgorithmTypeIndex val in hashEnumValues)
{
#>(int)HashAlgorithmType.<#= val #>, <#
}
#>};

        private static int GetPackedData(TlsCipherSuite cipherSuite)
        {
            switch (cipherSuite)
            {
<#
foreach (TlsCipherSuite val in tlsEnumValues)
{
TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
byte exchangeAlgorithmType =  (byte)Enum.Parse<ExchangeAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm));
byte cipherAlgorithmType =  (byte)Enum.Parse<CipherAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.CipherAlgorithm));
byte cipherAlgorithmStrength = (byte)data.CipherAlgorithmStrength;
byte hashAlgorithmType =  (byte)Enum.Parse<HashAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.MACAlgorithm));
#>
                case TlsCipherSuite.<#= val #>: return <#= exchangeAlgorithmType #> << (32 - (8 * 1)) | <#= cipherAlgorithmType #> << (32 - (8 * 2)) | <#= cipherAlgorithmStrength #> << (32 - (8 * 3)) | <#= hashAlgorithmType #> << (32 - (8 * 4));
<#
}
#>
                default: return 0;
            }
        }
    }
}
