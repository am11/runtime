<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array enumValues = typeof(TlsCipherSuite).GetEnumValues(); #>


using System.Diagnostics;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct SslConnectionInfo
    {
        private void MapCipherSuite(TlsCipherSuite cipherSuite)
        {
            TlsCipherSuite = cipherSuite;
            KeyExchKeySize = 0;

            int index = (int)cipherSuite * 2;
            Debug.Assert(s_cipherToIndex.IndexOf(index) > -1, $"No mapping found for cipherSuite {cipherSuite}");
            ulong data = s_encodedNumber[s_cipherToIndex[index + 1]];

            KeyExchangeAlg = (int)(data >> (64 - (16 * 1)) & 0xFFFF);
            DataCipherAlg = (int)(data >> (64 - (16 * 2)) & 0xFFFF);
            DataKeySize = (int)(data >> (64 - (16 * 3)) & 0xFFFF);
            DataHashAlg = (int)(data >> (64 - (16 * 4)) & 0xFFFF);
            DataHashKeySize = GetHashSize((HashAlgorithmType)DataHashAlg);

            static int GetHashSize(HashAlgorithmType hash)
            {
                switch (hash)
                {
                    case HashAlgorithmType.None:
                        return 0;
                    case HashAlgorithmType.Md5:
                        return 128;
                    case HashAlgorithmType.Sha1:
                        return 160;
                    case HashAlgorithmType.Sha256:
                        return 256;
                    case HashAlgorithmType.Sha384:
                        return 384;
                    case HashAlgorithmType.Sha512:
                        return 512;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(hash));
                }
            }
        }

        private static ReadOnlySpan<int> s_cipherToIndex => new[]
        {
<#
int i = 0;
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
            (int)TlsCipherSuite.<#= val #>, <#= i++ #>,
<#
}
#>
        };

        private static ReadOnlySpan<ulong> s_encodedNumber => new[]
        {
<#
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
            /* KeyExchangeAlg */ (ulong)ExchangeAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm) #> << (64 - (16 * 1)) |
            /* DataCipherAlg */ (ulong)CipherAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.CipherAlgorithm) #> << (64 - (16 * 2)) |
            /* DataKeySize */ (ulong)<#= data.CipherAlgorithmStrength #> << (64 - (16 * 3)) |
            /* DataHashAlg */ (ulong)HashAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.MACAlgorithm) #>  << (64 - (16 * 4)),

<#
}
#>
        };
    }
}
