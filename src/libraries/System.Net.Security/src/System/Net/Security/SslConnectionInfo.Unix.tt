<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array enumValues = typeof(TlsCipherSuite).GetEnumValues(); #>


using System.Diagnostics;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct SslConnectionInfo
    {
        private void MapCipherSuite(TlsCipherSuite cipherSuite)
        {
            TlsCipherSuite = cipherSuite;
            KeyExchKeySize = 0;

            int data1 = GetPackedData1(cipherSuite);
            Debug.Assert(data1 != 0, $"No mapping found for cipherSuite {cipherSuite}");

            int data2 = GetPackedData2(cipherSuite);
            Debug.Assert(data2 != 0, $"No mapping found for cipherSuite {cipherSuite}");

            KeyExchangeAlg = (data1 >> (64 - (16 * 1)) & 0xFFFF);
            DataCipherAlg = (data1 >> (64 - (16 * 2)) & 0xFFFF);
            DataKeySize = (data2 >> (64 - (16 * 3)) & 0xFFFF);
            DataHashAlg = (data2 >> (64 - (16 * 4)) & 0xFFFF);
            DataHashKeySize = GetHashSize((HashAlgorithmType)DataHashAlg);

            static int GetHashSize(HashAlgorithmType hash)
            {
                switch (hash)
                {
                    case HashAlgorithmType.None:
                        return 0;
                    case HashAlgorithmType.Md5:
                        return 128;
                    case HashAlgorithmType.Sha1:
                        return 160;
                    case HashAlgorithmType.Sha256:
                        return 256;
                    case HashAlgorithmType.Sha384:
                        return 384;
                    case HashAlgorithmType.Sha512:
                        return 512;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(hash));
                }
            }

            static int GetPackedData1(TlsCipherSuite cipherSuite)
            {
                switch (cipherSuite)
                {
<#
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
                    case TlsCipherSuite.<#= val #>: return
                        /* KeyExchangeAlg */ (int)ExchangeAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm) #> << (64 - (16 * 1)) |
                        /* DataCipherAlg */ (int)CipherAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.CipherAlgorithm) #> << (64 - (16 * 2));

<#
}
#>
                    default: return 0;
                }
            }

            static int GetPackedData2(TlsCipherSuite cipherSuite)
            {
                switch (cipherSuite)
                {
<#
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
                    case TlsCipherSuite.<#= val #>: return
                        /* DataKeySize */ (int)<#= data.CipherAlgorithmStrength #> << (64 - (16 * 3)) |
                        /* DataHashAlg */ (int)HashAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.MACAlgorithm) #>  << (64 - (16 * 4));

<#
}
#>
                    default: return 0;
                }
            }
        }
    }
}
