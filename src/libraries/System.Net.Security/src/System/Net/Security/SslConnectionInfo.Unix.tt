<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array tlsEnumValues = typeof(TlsCipherSuite).GetEnumValues(); #>
<# Array exchangeEnumValues = typeof(ExchangeAlgorithmTypeIndex).GetEnumValues(); #>
<# Array cipherEnumValues = typeof(CipherAlgorithmTypeIndex).GetEnumValues(); #>
<# Array hashEnumValues = typeof(HashAlgorithmTypeIndex).GetEnumValues(); #>


using System.Diagnostics;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct SslConnectionInfo
    {
        private void MapCipherSuite(TlsCipherSuite cipherSuite)
        {
            TlsCipherSuite = cipherSuite;
            KeyExchKeySize = 0;
            ReadOnlySpan<int> exchangeAlgorithmTypes =
                new[] { <#
    foreach (ExchangeAlgorithmTypeIndex val in exchangeEnumValues)
    {
    #>(int)ExchangeAlgorithmType.<#= val #>, <#
    }
    #>};
            ReadOnlySpan<int> cipherEnumValues =
                new[] { <#
    foreach (CipherAlgorithmTypeIndex val in cipherEnumValues)
    {
    #>(int)CipherAlgorithmType.<#= val #>, <#
    }
    #>};
<#
ReadOnlySpan<int> strengths = new[] { 0, 40, 56, 128, 168, 256 };
#>
            ReadOnlySpan<int> cipherStrengthEnumValues =
                new[] { <#= string.Join(", ", strengths.ToArray()) #> };
            ReadOnlySpan<int> hashEnumValues =
                new[] { <#
foreach (HashAlgorithmTypeIndex val in hashEnumValues)
{
    #>(int)HashAlgorithmType.<#= val #>, <#
}
    #>};
            ReadOnlySpan<int> hashKeySize =
                new[] { 0, 128, 160, 256, 384, 512 };

            ushort data = GetPackedData(cipherSuite);
            Debug.Assert(data != 0, $"No mapping found for cipherSuite {cipherSuite}");

            KeyExchangeAlg = exchangeAlgorithmTypes[(data >> 12) & 0xF];
            DataCipherAlg = cipherEnumValues[(data >> 8) & 0xF];
            DataKeySize = cipherStrengthEnumValues[(data >> 4) & 0xF];
            DataHashAlg = hashEnumValues[data & 0xF];
            DataHashKeySize = hashKeySize[data & 0xF];

            static ushort GetPackedData(TlsCipherSuite cipherSuite)
            {
                switch (cipherSuite)
                {
    <#
    foreach (TlsCipherSuite val in tlsEnumValues)
    {
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
    byte exchangeAlgorithmType =  (byte)Enum.Parse<ExchangeAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm));
    byte cipherAlgorithmType =  (byte)Enum.Parse<CipherAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.CipherAlgorithm));
    byte cipherAlgorithmStrength = (byte)strengths.IndexOf(data.CipherAlgorithmStrength);
    byte hashAlgorithmType =  (byte)Enum.Parse<HashAlgorithmTypeIndex>(EnumHelpers.ToFrameworkName(data.MACAlgorithm));
    #>
                    case TlsCipherSuite.<#= val #>: return <#= exchangeAlgorithmType #> << 12 | <#= cipherAlgorithmType #> << 8 | <#= cipherAlgorithmStrength #> << 4 | <#= hashAlgorithmType #>;
    <#
    }
    #>
                    default: return 0;
                }
            }
        }
    }
}
