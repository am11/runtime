<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Net.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TlsCipherSuiteNameParser.ttinclude" #><#@
    include file="TlsCipherSuite.cs" #>
<# Array enumValues = typeof(TlsCipherSuite).GetEnumValues(); #>


using System.Diagnostics;
using System.Security.Authentication;

namespace System.Net.Security
{
    internal partial struct SslConnectionInfo
    {
        private void MapCipherSuite(TlsCipherSuite cipherSuite)
        {
            TlsCipherSuite = cipherSuite;
            KeyExchKeySize = 0;

            // set most common values as default to reduce the IL size
            KeyExchangeAlg = (int)ExchangeAlgorithmType.DiffieHellman;
            DataCipherAlg = (int)CipherAlgorithmType.Null;
            DataKeySize = 128;
            DataHashAlg = (int)HashAlgorithmType.None;
            DataHashKeySize = 0;

            switch (cipherSuite)
            {
<#
foreach (TlsCipherSuite val in enumValues)
{
    TlsCipherSuiteData data = new CipherSuiteNameData(val.ToString()).Data;
#>
                case TlsCipherSuite.<#= val #>:
<#
    if (EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm) != "DiffieHellman")
    {
#>
                    KeyExchangeAlg = (int)ExchangeAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.KeyExchangeAlgorithm) #>;
<#
    }

    if (EnumHelpers.ToFrameworkName(data.CipherAlgorithm) != "Null")
    {
#>
                    DataCipherAlg = (int)CipherAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.CipherAlgorithm) #>;
<#
    }

    if (data.CipherAlgorithmStrength != 128)
    {
#>
                    DataKeySize = <#= data.CipherAlgorithmStrength #>;
<#
    }

    if (EnumHelpers.ToFrameworkName(data.MACAlgorithm) != "None")
    {
#>
                    DataHashAlg = (int)HashAlgorithmType.<#= EnumHelpers.ToFrameworkName(data.MACAlgorithm) #>;
<#
    }
#>
                    break;

<#
}
#>
                default:
                    Debug.Fail($"No mapping found for cipherSuite {cipherSuite}");
                    KeyExchangeAlg = (int)ExchangeAlgorithmType.None;
                    DataKeySize = 0;
                    break;
            }

            DataHashKeySize = GetHashSize((HashAlgorithmType)DataHashAlg);

            static int GetHashSize(HashAlgorithmType hash)
            {
                switch (hash)
                {
                    case HashAlgorithmType.None:
                        return 0;
                    case HashAlgorithmType.Md5:
                        return 128;
                    case HashAlgorithmType.Sha1:
                        return 160;
                    case HashAlgorithmType.Sha256:
                        return 256;
                    case HashAlgorithmType.Sha384:
                        return 384;
                    case HashAlgorithmType.Sha512:
                        return 512;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(hash));
                }
            }
        }
    }
}
