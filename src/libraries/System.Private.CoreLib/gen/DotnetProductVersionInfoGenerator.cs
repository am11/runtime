// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Immutable;
using System.IO;
using Microsoft.CodeAnalysis;

namespace Generators
{
    [Generator]
    public partial class DotnetProductVersionInfoGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // we only care about filename which is of the form "$(Version).versionstring", no need to actually read the file.
            IncrementalValuesProvider<AdditionalText> textFiles = context.AdditionalTextsProvider.Where(static file => file.Path.EndsWith(".versionstring"));
            IncrementalValueProvider<(Compilation Left, ImmutableArray<AdditionalText> Right)> compilationAndFiles =
                context.CompilationProvider.Combine(textFiles.Collect());

            context.RegisterSourceOutput(compilationAndFiles, (spc, content) =>
            {
                // strip semver metadata (git hash) followed by + sign
                string? productVersion = Path.GetFileNameWithoutExtension(content.Right[0].Path.Split('+')?[0]);

                if (productVersion is null)
                    throw new InvalidOperationException($"Unable to get product version at build time.");

                spc.AddSource("Environment.DotnetProductVersionInfo.g.cs", $@"
// <auto-generated/>

namespace System;

public static partial class Environment
{{
    internal const string ProductVersionWithLabel = ""{productVersion}"";
    private const string ProductVersionWithoutLabel = ""{productVersion.Split('-')?[0]}"";
}}");
            });
        }
    }
}
